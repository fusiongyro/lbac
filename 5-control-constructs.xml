<?xml version="1.0" encoding="utf-8"?>
<chapter xmlns:id="part-ii-expression-parsing"
	 xmlns="http://docbook.org/ns/docbook" version="5.0">
  <title>Control Constructs</title>
  <info><date>19 August 1988</date></info>
  <sect1 xml:id="introduction">
    <title>Introduction</title>
    <para>
      In the first four installments of this series, we've been
      concentrating on the parsing of math expressions and assignment
      statements. In this installment, we'll take off on a new and
      exciting tangent: that of parsing and translating control
      constructs such as if statements.
    </para>
    <para>
      This subject is dear to my heart, because it represents a turning
      point for me. I had been playing with the parsing of expressions,
      just as we have done in this series, but I still felt that I was a
      <emphasis>long</emphasis> way from being able to handle a complete
      language. After all, <emphasis>real</emphasis> languages have
      branches and loops and subroutines and all that. Perhaps you've
      shared some of the same thoughts. Awhile back, though, I had to
      produce control constructs for a structured assembler preprocessor
      I was writing. Imagine my surprise to discover that it was far
      easier than the expression parsing I had already been through. I
      remember thinking, <quote>Hey! This is <emphasis>easy</emphasis>!</quote> After we've finished this
      session, I'll bet you'll be thinking so, too.
    </para>
  </sect1>
  <sect1 xml:id="the-plan">
    <title>The Plan</title>
    <para>
      In what follows, we'll be starting over again with a bare cradle,
      and as we've done twice before now, we'll build things up one at a
      time. We'll also be retaining the concept of single-character
      tokens that has served us so well to date. This means that the
      <quote>code</quote> will look a little funny, with 'i' for
      <literal>IF</literal>, 'w' for <literal>WHILE</literal>, etc. But
      it helps us get the concepts down pat without fussing over lexical
      scanning. Fear notâ€¦ eventually we'll see something looking like
      <quote>real</quote> code.
    </para>
    <para>
      I also don't want to have us get bogged down in dealing with
      statements other than branches, such as the assignment statements
      we've been working on. We've already demonstrated that we can
      handle them, so there's no point carrying them around as excess
      baggage during this exercise. So what I'll do instead is to use an
      anonymous statement, <quote>other</quote>, to take the place of the
      non-control statements and serve as a place-holder for them. We
      have to generate some kind of object code for them (we're back
      into compiling, not interpretation), so for want of anything else
      I'll just echo the character input.
    </para>
    <para>
      OK, then, starting with yet another copy of the cradle, let's
      define the procedure:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Recognize and Translate an <quote>Other</quote> }

procedure Other;
begin
   EmitLn(GetName);
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      Now include a call to it in the main program, thus:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Main Program }

begin
   Init;
   Other;
end.
{--------------------------------------------------------------}
</programlisting>
    <para>
      Run the program and see what you get. Not very exciting, is it?
      But hang in there, it's a start, and things will get better.
    </para>
    <para>
      The first thing we need is the ability to deal with more than one
      statement, since a single-line branch is pretty limited. We did
      that in the last session on interpreting, but this time let's get
      a little more formal. Consider the following BNF:
    </para>
    <programlisting>
      &lt;program&gt; ::= &lt;block&gt; END

      &lt;block&gt; ::= [ &lt;statement&gt; ]*
</programlisting>
    <para>
      This says that, for our purposes here, a program is defined as a
      block, followed by an <literal>END</literal> statement. A block,
      in turn, consists of zero or more statements. We only have one
      kind of statement, so far.
    </para>
    <para>
      What signals the end of a block? It's simply any construct that
      isn't an <quote>other</quote> statement. For now, that means only the
      <literal>END</literal> statement.
    </para>
    <para>
      Armed with these ideas, we can proceed to build up our parser. The
      code for a program (we have to call it
      <literal>DoProgram</literal>, or Pascal will complain, is:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Parse and Translate a Program }

procedure DoProgram;
begin
   Block;
   if Look &lt;&gt; 'e' then Expected('End');
   EmitLn('END')
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      Notice that I've arranged to emit an
      <quote><literal>END</literal></quote> command to the assembler, which
      sort of punctuates the output code, and makes sense considering
      that we're parsing a complete program here.
    </para>
    <para>
      The code for Block is:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Recognize and Translate a Statement Block }

procedure Block;
begin
   while not(Look in ['e']) do begin
      Other;
   end;
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      (From the form of the procedure, you just
      <emphasis>know</emphasis> we're going to be adding to it in a
      bit!)
    </para>
    <para>
      OK, enter these routines into your program. Replace the call to
      Block in the main program, by a call to DoProgram. Now try it and
      see how it works. Well, it's still not much, but we're getting
      closer.
    </para>
  </sect1>
  <sect1 xml:id="some-groundwork">
    <title>Some Groundwork</title>
    <para>
      Before we begin to define the various control constructs, we need
      to lay a bit more groundwork. First, a word of warning: I won't be
      using the same syntax for these constructs as you're familiar with
      from Pascal or C. For example, the Pascal syntax for an
      <literal>IF</literal> is:
    </para>
    <programlisting>
 IF &lt;condition&gt; THEN &lt;statement&gt;
</programlisting>
    <para>
      (where the statement, of course, may be compound).
    </para>
    <para>
      The C version is similar:
    </para>
    <programlisting>
 IF ( &lt;condition&gt; ) &lt;statement&gt;
</programlisting>
    <para>
      Instead, I'll be using something that looks more like Ada:
    </para>
    <programlisting>
 IF &lt;condition&gt; &lt;block&gt; ENDIF
</programlisting>
    <para>
      In other words, the <literal>IF</literal> construct has a specific
      termination symbol. This avoids the dangling-else of Pascal and C
      and also precludes the need for the brackets {} or begin-end. The
      syntax I'm showing you here, in fact, is that of the language KISS
      that I'll be detailing in later installments. The other constructs
      will also be slightly different. That shouldn't be a real problem
      for you. Once you see how it's done, you'll realize that it really
      doesn't matter so much which specific syntax is involved. Once the
      syntax is defined, turning it into code is straightforward.
    </para>
    <para>
      Now, all of the constructs we'll be dealing with here involve
      transfer of control, which at the assembler-language level means
      conditional and/or unconditional branches. For example, the simple
      IF statement
    </para>
    <programlisting>
      IF &lt;condition&gt; A ENDIF B ....
</programlisting>
    <para>
      must get translated into
    </para>
    <programlisting>
      Branch if NOT condition to L
      A
 L:   B
      ...
</programlisting>
    <para>
      It's clear, then, that we're going to need some more procedures to
      help us deal with these branches. I've defined two of them below.
      Procedure NewLabel generates unique labels. This is done via the
      simple expedient of calling every label 'Lnn', where nn is a label
      number starting from zero. Procedure <literal>PostLabel</literal>
      just outputs the labels at the proper place.
    </para>
    <para>
      Here are the two routines:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Generate a Unique Label }

function NewLabel: string;
var S: string;
begin
   Str(LCount, S);
   NewLabel := 'L' + S;
   Inc(LCount);
end;


{--------------------------------------------------------------}
{ Post a Label To Output }

procedure PostLabel(L: string);
begin
   WriteLn(L, ':');
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      Notice that we've added a new global variable,
      <literal>LCount</literal>, so you need to change the
      <literal>VAR</literal> declarations at the top of the program to
      look like this:
    </para>
    <programlisting>
var Look  : char;              { Lookahead Character }
    Lcount: integer;           { Label Counter }
</programlisting>
    <para>
      Also, add the following extra initialization to Init:
    </para>
    <programlisting>
LCount := 0;
</programlisting>
    <para>
      (<emphasis>Don't</emphasis> forget that, or your labels can look
      really strange!)
    </para>
    <para>
      At this point I'd also like to show you a new kind of notation. If
      you compare the form of the <literal>IF</literal> statement above
      with the assembler code that must be produced, you can see that
      there are certain actions associated with each of the keywords in
      the statement:
    </para>
    <programlisting>
 IF:  First, get the condition and issue the code for it.
      Then, create a unique label and emit a branch if false.

 ENDIF: Emit the label.
</programlisting>
    <para>
      These actions can be shown very concisely if we write the syntax
      this way:
    </para>
    <programlisting>
 IF
 &lt;condition&gt;    { Condition;
                  L = NewLabel;
                  Emit(Branch False to L); }
 &lt;block&gt;
 ENDIF          { PostLabel(L) }
</programlisting>
    <para>
      This is an example of syntax-directed translation. We've been
      doing it all alongâ€¦ we've just never written it down this way
      before. The stuff in curly brackets represents the
      <emphasis>actions</emphasis> to be taken. The nice part about this
      representation is that it not only shows what we have to
      recognize, but also the actions we have to perform, and in which
      order. Once we have this syntax, the code almost writes itself.
    </para>
    <para>
      About the only thing left to do is to be a bit more specific about
      what we mean by <quote>Branch if false.</quote>
    </para>
    <para>
      I'm assuming that there will be code executed for &lt;condition&gt; that
      will perform Boolean algebra and compute some result. It should
      also set the condition flags corresponding to that result. Now,
      the usual convention for a Boolean variable is to let 0000
      represent <quote>false,</quote> and anything else (some use FFFF,
      some 0001) represent <quote>true.</quote>
    </para>
    <para>
      On the 68000 the condition flags are set whenever any data is
      moved or calculated. If the data is a 0000 (corresponding to a
      false condition, remember), the zero flag will be set. The code
      for <quote>Branch on zero</quote> is <literal>BEQ</literal>. So for
      our purposes here,
    </para>
    <programlisting>
           BEQ  &lt;=&gt; Branch if false
           BNE  &lt;=&gt; Branch if true
</programlisting>
    <para>
      It's the nature of the beast that most of the branches we see will
      be <literal>BEQ</literal>'sâ€¦ we'll be branching
      <emphasis>around</emphasis> the code that's supposed to be
      executed when the condition is true.
    </para>
  </sect1>
  <sect1 xml:id="the-if-statement">
    <title>The <literal>IF</literal> Statement</title>
    <para>
      With that bit of explanation out of the way, we're finally ready
      to begin coding the <literal>IF</literal>-statement parser. In
      fact, we've almost already done it! As usual, I'll be using our
      single-character approach, with the character 'i' for
      <literal>IF</literal>, and 'e' for <literal>ENDIF</literal> (as
      well as <literal>END</literal>â€¦ that dual nature causes no
      confusion). I'll also, for now, skip completely the character for
      the branch condition, which we still have to define.
    </para>
    <para>
      The code for <literal>DoIf</literal> is:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Recognize and Translate an IF Construct }

procedure Block; Forward;


procedure DoIf;
var L: string;
begin
   Match('i');
   L := NewLabel;
   Condition;
   EmitLn('BEQ ' + L);
   Block;
   Match('e');
   PostLabel(L);
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      Add this routine to your program, and change Block to reference it
      as follows:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Recognize and Translate a Statement Block }

procedure Block;
begin
   while not(Look in ['e']) do begin
      case Look of
       'i': DoIf;
       'o': Other;
      end;
   end;
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      Notice the reference to procedure <literal>Condition</literal>.
      Eventually, we'll write a routine that can parse and translate any
      Boolean condition we care to give it. But that's a whole
      installment by itself (the next one, in fact). For now, let's just
      make it a dummy that emits some text. Write the following routine:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Parse and Translate a Boolean Condition }
{ This version is a dummy }

Procedure Condition;
begin
   EmitLn('&lt;condition&gt;');
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      Insert this procedure in your program just before
      <literal>DoIf</literal>. Now run the program. Try a string like
    </para>
    <programlisting>
 aibece
</programlisting>
    <para>
      As you can see, the parser seems to recognize the construct and
      inserts the object code at the right places. Now try a set of
      nested <literal>IF</literal>'s, like
    </para>
    <programlisting>
 aibicedefe
</programlisting>
    <para>
      It's starting to look real, eh?
    </para>
    <para>
      Now that we have the general idea (and the tools such as the
      notation and the procedures <literal>NewLabel</literal> and
      <literal>PostLabel</literal>), it's a piece of cake to extend the
      parser to include other constructs. The first (and also one of the
      trickiest) is to add the <literal>ELSE</literal> clause to
      <literal>IF</literal>. The BNF is
    </para>
    <programlisting>
 IF &lt;condition&gt; &lt;block&gt; [ ELSE &lt;block&gt;] ENDIF
</programlisting>
    <para>
      The tricky part arises simply because there is an optional part,
      which doesn't occur in the other constructs.
    </para>
    <para>
      The corresponding output code should be
    </para>
    <programlisting>
      &lt;condition&gt;
      BEQ L1
      &lt;block&gt;
      BRA L2
 L1:  &lt;block&gt;
 L2:  ...
</programlisting>
    <para>
      This leads us to the following syntax-directed translation:
    </para>
    <programlisting>
 IF
 &lt;condition&gt;    { L1 = NewLabel;
                  L2 = NewLabel;
                  Emit(BEQ L1) }
 &lt;block&gt;
 ELSE           { Emit(BRA L2);
                  PostLabel(L1) }
 &lt;block&gt;
 ENDIF          { PostLabel(L2) }
</programlisting>
    <para>
      Comparing this with the case for an <literal>ELSE</literal>-less
      IF gives us a clue as to how to handle both situations. The code
      below does it. (Note that I use an 'l' for the
      <literal>ELSE</literal>, since 'e' is otherwise occupied):
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Recognize and Translate an IF Construct }

procedure DoIf;
var L1, L2: string;
begin
   Match('i');
   Condition;
   L1 := NewLabel;
   L2 := L1;
   EmitLn('BEQ ' + L1);
   Block;
   if Look = 'l' then begin
      Match('l');
      L2 := NewLabel;
      EmitLn('BRA ' + L2);
      PostLabel(L1);
      Block;
   end;
   Match('e');
   PostLabel(L2);
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      There you have it. A complete <literal>IF</literal>
      parser/translator, in 19 lines of code.
    </para>
    <para>
      Give it a try now. Try something like
    </para>
    <para>
      aiblcede
    </para>
    <para>
      Did it work? Now, just to be sure we haven't broken the
      <literal>ELSE</literal>-less case, try
    </para>
    <para>
      aibece
    </para>
    <para>
      Now try some nested <literal>IF</literal>'s. Try anything you
      like, including some badly formed statements. Just remember that
      'e' is not a legal <quote>other</quote> statement.
    </para>
  </sect1>
  <sect1 xml:id="the-while-statement">
    <title>The <literal>WHILE</literal> Statement</title>
    <para>
      The next type of statement should be easy, since we already have
      the process down pat. The syntax I've chosen for the
      <literal>WHILE</literal> statement is
    </para>
    <programlisting>
      WHILE &lt;condition&gt; &lt;block&gt; ENDWHILE
</programlisting>
    <para>
      I know, I know, we don't <emphasis>really</emphasis> need separate
      kinds of terminators for each constructâ€¦ you can see that by the
      fact that in our one-character version, 'e' is used for all of
      them. But I also remember <emphasis>many</emphasis> debugging
      sessions in Pascal, trying to track down a wayward
      <literal>END</literal> that the compiler obviously thought I meant
      to put somewhere else. It's been my experience that specific and
      unique keywords, although they add to the vocabulary of the
      language, give a bit of error-checking that is worth the extra
      work for the compiler writer.
    </para>
    <para>
      Now, consider what the <literal>WHILE</literal> should be
      translated into. It should be:
    </para>
    <programlisting>
 L1:  &lt;condition&gt;
      BEQ L2
      &lt;block&gt;
      BRA L1
 L2:
</programlisting>
    <para>
      As before, comparing the two representations gives us the actions
      needed at each point.
    </para>
    <programlisting>
 WHILE          { L1 = NewLabel;
                  PostLabel(L1) }
 &lt;condition&gt;    { Emit(BEQ L2) }
 &lt;block&gt;
 ENDWHILE       { Emit(BRA L1);
                  PostLabel(L2) }
</programlisting>
    <para>
      The code follows immediately from the syntax:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Parse and Translate a WHILE Statement }

procedure DoWhile;
var L1, L2: string;
begin
   Match('w');
   L1 := NewLabel;
   L2 := NewLabel;
   PostLabel(L1);
   Condition;
   EmitLn('BEQ ' + L2);
   Block;
   Match('e');
   EmitLn('BRA ' + L1);
   PostLabel(L2);
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      Since we've got a new statement, we have to add a call to it
      within procedure Block:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Recognize and Translate a Statement Block }

procedure Block;
begin
   while not(Look in ['e', 'l']) do begin
      case Look of
       'i': DoIf;
       'w': DoWhile;
       else Other;
      end;
   end;
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      No other changes are necessary.
    </para>
    <para>
      OK, try the new program. Note that this time, the &lt;condition&gt; code
      is <emphasis>inside</emphasis> the upper label, which is just
      where we wanted it. Try some nested loops. Try some loops within
      <literal>IF</literal>'s, and some <literal>IF</literal>'s within
      loops. If you get a bit confused as to what you should type, don't
      be discouraged: you write bugs in other languages, too, don't you?
      It'll look a lot more meaningful when we get full keywords.
    </para>
    <para>
      I hope by now that you're beginning to get the idea that this
      really <emphasis>is</emphasis> easy. All we have to do to
      accomodate a new construct is to work out the syntax-directed
      translation of it. The code almost falls out from there, and it
      doesn't affect any of the other routines. Once you've gotten the
      feel of the thing, you'll see that you can add new constructs
      about as fast as you can dream them up.
    </para>
  </sect1>
  <sect1 xml:id="the-loop-statement">
    <title>The <literal>LOOP</literal> Statement</title>
    <para>
      We could stop right here, and have a language that works. It's
      been shown many times that a high-order language with only two
      constructs, the <literal>IF</literal> and the
      <literal>WHILE</literal>, is sufficient to write structured code.
      But we're on a roll now, so let's richen up the repertoire a bit.
    </para>
    <para>
      This construct is even easier, since it has no condition test at
      allâ€¦ it's an infinite loop. What's the point of such a loop? Not
      much, by itself, but later on we're going to add a
      <literal>BREAK</literal> command, that will give us a way out.
      This makes the language considerably richer than Pascal, which has
      no break, and also avoids the funny <literal>WHILE(1)</literal> or
      <literal>WHILE TRUE</literal> of C and Pascal.
    </para>
    <para>
      The syntax is simply
    </para>
    <programlisting>
 LOOP &lt;block&gt; ENDLOOP
</programlisting>
    <para>
      and the syntax-directed translation is:
    </para>
    <programlisting>
 LOOP           { L = NewLabel;
                  PostLabel(L) }
 &lt;block&gt;
 ENDLOOP        { Emit(BRA L }
</programlisting>
    <para>
      The corresponding code is shown below. Since I've already used 'l'
      for the <literal>ELSE</literal>, I've used the last letter, 'p',
      as the <quote>keyword</quote> this time.
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Parse and Translate a LOOP Statement }

procedure DoLoop;
var L: string;
begin
   Match('p');
   L := NewLabel;
   PostLabel(L);
   Block;
   Match('e');
   EmitLn('BRA ' + L);
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      When you insert this routine, don't forget to add a line in Block
      to call it.
    </para>
  </sect1>
  <sect1 xml:id="repeat-until">
    <title><literal>REPEAT-UNTIL</literal></title>
    <para>
      Here's one construct that I lifted right from Pascal. The syntax
      is
    </para>
    <programlisting>
 REPEAT &lt;block&gt; UNTIL &lt;condition&gt;  ,
</programlisting>
    <para>
      and the syntax-directed translation is:
    </para>
    <programlisting>
 REPEAT         { L = NewLabel;
                  PostLabel(L) }
 &lt;block&gt;
 UNTIL
 &lt;condition&gt;    { Emit(BEQ L) }
</programlisting>
    <para>
      As usual, the code falls out pretty easily:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Parse and Translate a REPEAT Statement }

procedure DoRepeat;
var L: string;
begin
   Match('r');
   L := NewLabel;
   PostLabel(L);
   Block;
   Match('u');
   Condition;
   EmitLn('BEQ ' + L);
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      As before, we have to add the call to <literal>DoRepeat</literal>
      within <literal>Block</literal>. This time, there's a difference,
      though. I decided to use 'r' for <literal>REPEAT</literal>
      (naturally), but I also decided to use 'u' for
      <literal>UNTIL</literal>. This means that the 'u' must be added to
      the set of characters in the while-test. These are the characters
      that signal an exit from the current blockâ€¦ the <quote>follow</quote>
      characters, in compiler jargon.
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Recognize and Translate a Statement Block }

procedure Block;
begin
   while not(Look in ['e', 'l', 'u']) do begin
      case Look of
       'i': DoIf;
       'w': DoWhile;
       'p': DoLoop;
       'r': DoRepeat;
       else Other;
      end;
   end;
end;
{--------------------------------------------------------------}
</programlisting>
  </sect1>
  <sect1 xml:id="the-for-loop">
    <title>The <literal>FOR</literal> Loop</title>
    <para>
      The <literal>FOR</literal> loop is a very handy one to have
      around, but it's a bear to translate. That's not so much because
      the construct itself is hardâ€¦ it's only a loop after allâ€¦ but
      simply because it's hard to implement in assembler language. Once
      the code is figured out, the translation is straightforward
      enough.
    </para>
    <para>
      C fans love the <literal>FOR</literal>-loop of that language (and,
      in fact, it's easier to code), but I've chosen instead a syntax
      very much like the one from good ol' BASIC:
    </para>
    <programlisting>
 FOR &lt;ident&gt; = &lt;expr1&gt; TO &lt;expr2&gt; &lt;block&gt; ENDFOR
</programlisting>
    <para>
      The translation of a <literal>FOR</literal> loop can be just about
      as difficult as you choose to make it, depending upon the way you
      decide to define the rules as to how to handle the limits. Does
      expr2 get evaluated every time through the loop, for example, or
      is it treated as a constant limit? Do you always go through the
      loop at least once, as in FORTRAN, or not? It gets simpler if you
      adopt the point of view that the construct is equivalent to:
    </para>
    <programlisting>
 &lt;ident&gt; = &lt;expr1&gt;
 TEMP = &lt;expr2&gt;
 WHILE &lt;ident&gt; &lt;= TEMP
 &lt;block&gt;
 ENDWHILE
</programlisting>
    <para>
      Notice that with this definition of the loop, &lt;block&gt; will not be
      executed at all if &lt;expr1&gt; is initially larger than &lt;expr2&gt;.
    </para>
    <para>
      The 68000 code needed to do this is trickier than anything we've
      done so far. I had a couple of tries at it, putting both the
      counter and the upper limit on the stack, both in registers, etc.
      I finally arrived at a hybrid arrangement, in which the loop
      counter is in memory (so that it can be accessed within the loop),
      and the upper limit is on the stack. The translated code came out
      like this:
    </para>
    <programlisting>
      &lt;ident&gt;             get name of loop counter
      &lt;expr1&gt;             get initial value
      LEA &lt;ident&gt;(PC),A0  address the loop counter
      SUBQ #1,D0          predecrement it
      MOVE D0,(A0)        save it
      &lt;expr1&gt;             get upper limit
      MOVE D0,-(SP)       save it on stack

 L1:  LEA &lt;ident&gt;(PC),A0  address loop counter
      MOVE (A0),D0        fetch it to D0
      ADDQ #1,D0          bump the counter
      MOVE D0,(A0)        save new value
      CMP (SP),D0         check for range
      BLE L2              skip out if D0 &gt; (SP)
      &lt;block&gt;
      BRA L1              loop for next pass
 L2:  ADDQ #2,SP          clean up the stack
</programlisting>
    <para>
      Wow! That seems like a lot of codeâ€¦ the line containing &lt;block&gt;
      seems to almost get lost. But that's the best I could do with it.
      I guess it helps to keep in mind that it's really only sixteen
      words, after all. If anyone else can optimize this better, please
      let me know.
    </para>
    <para>
      Still, the parser routine is pretty easy now that we have the
      code:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Parse and Translate a FOR Statement }

procedure DoFor;
var L1, L2: string;
    Name: char;
begin
   Match('f');
   L1 := NewLabel;
   L2 := NewLabel;
   Name := GetName;
   Match('=');
   Expression;
   EmitLn('SUBQ #1,D0');
   EmitLn('LEA ' + Name + '(PC),A0');
   EmitLn('MOVE D0,(A0)');
   Expression;
   EmitLn('MOVE D0,-(SP)');
   PostLabel(L1);
   EmitLn('LEA ' + Name + '(PC),A0');
   EmitLn('MOVE (A0),D0');
   EmitLn('ADDQ #1,D0');
   EmitLn('MOVE D0,(A0)');
   EmitLn('CMP (SP),D0');
   EmitLn('BGT ' + L2);
   Block;
   Match('e');
   EmitLn('BRA ' + L1);
   PostLabel(L2);
   EmitLn('ADDQ #2,SP');
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      Since we don't have expressions in this parser, I used the same
      trick as for Condition, and wrote the routine
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Parse and Translate an Expression }
{ This version is a dummy }

Procedure Expression;
begin
   EmitLn('&lt;expr&gt;');
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      Give it a try. Once again, don't forget to add the call in
      <literal>Block</literal>. Since we don't have any input for the
      dummy version of <literal>Expression</literal>, a typical input
      line would look something like
    </para>
    <programlisting>
 afi=bece
</programlisting>
    <para>
      Well, it <emphasis>does</emphasis> generate a lot of code, doesn't
      it? But at least it's the <emphasis>right</emphasis> code.
    </para>
  </sect1>
  <sect1 xml:id="the-do-statement">
    <title>The <literal>DO</literal> Statement</title>
    <para>
      All this made me wish for a simpler version of the
      <literal>FOR</literal> loop. The reason for all the code above is
      the need to have the loop counter accessible as a variable within
      the loop. If all we need is a counting loop to make us go through
      something a specified number of times, but don't need access to
      the counter itself, there is a much easier solution. The 68000 has
      a <quote>decrement and branch nonzero</quote> instruction built in
      which is ideal for counting. For good measure, let's add this
      construct, too. This will be the last of our loop structures.
    </para>
    <para>
      The syntax and its translation is:
    </para>
    <programlisting>
 DO
 &lt;expr&gt;         { Emit(SUBQ #1,D0);
                  L = NewLabel;
                  PostLabel(L);
                  Emit(MOVE D0,-(SP) }
 &lt;block&gt;
 ENDDO          { Emit(MOVE (SP)+,D0;
                  Emit(DBRA D0,L) }
</programlisting>
    <para>
      That's quite a bit simpler! The loop will execute &lt;expr&gt; times.
      Here's the code:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Parse and Translate a DO Statement }

procedure Dodo;
var L: string;
begin
   Match('d');
   L := NewLabel;
   Expression;
   EmitLn('SUBQ #1,D0');
   PostLabel(L);
   EmitLn('MOVE D0,-(SP)');
   Block;
   EmitLn('MOVE (SP)+,D0');
   EmitLn('DBRA D0,' + L);
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      I think you'll have to agree, that's a whole lot simpler than the
      classical <literal>FOR</literal>. Still, each construct has its
      place.
    </para>
  </sect1>
  <sect1 xml:id="the-break-statement">
    <title>The <literal>BREAK</literal> Statement</title>
    <para>
      Earlier I promised you a <literal>BREAK</literal> statement to
      accompany <literal>LOOP</literal>. This is one I'm sort of proud
      of. On the face of it a <literal>BREAK</literal> seems really
      tricky. My first approach was to just use it as an extra
      terminator to <literal>Block</literal>, and split all the loops
      into two parts, just as I did with the <literal>ELSE</literal>
      half of an <literal>IF</literal>. That turns out not to work,
      though, because the <literal>BREAK</literal> statement is almost
      certainly not going to show up at the same level as the loop
      itself. The most likely place for a <literal>BREAK</literal> is
      right after an <literal>IF</literal>, which would cause it to exit
      to the <literal>IF</literal> construct, not the enclosing loop.
      <emphasis>Wrong</emphasis>. The <literal>BREAK</literal> has to
      exit the inner <literal>LOOP</literal>, even if it's nested down
      into several levels of <literal>IF</literal>s.
    </para>
    <para>
      My next thought was that I would just store away, in some global
      variable, the ending label of the innermost loop. That doesn't
      work either, because there may be a break from an inner loop
      followed by a break from an outer one. Storing the label for the
      inner loop would clobber the label for the outer one. So the
      global variable turned into a stack. Things were starting to get
      messy.
    </para>
    <para>
      Then I decided to take my own advice. Remember in the last session
      when I pointed out how well the implicit stack of a recursive
      descent parser was serving our needs? I said that if you begin to
      see the need for an external stack you might be doing something
      wrong. Well, I was. It is indeed possible to let the recursion
      built into our parser take care of everything, and the solution is
      so simple that it's surprising.
    </para>
    <para>
      The secret is to note that every <literal>BREAK</literal>
      statement has to occur within a blockâ€¦ there's no place else for
      it to be. So all we have to do is to pass into
      <literal>Block</literal> the exit address of the innermost loop.
      Then it can pass the address to the routine that translates the
      break instruction. Since an <literal>IF</literal> statement
      doesn't change the loop level, procedure <literal>DoIf</literal>
      doesn't need to do anything except pass the label into
      <emphasis>its</emphasis> blocks (both of them). Since loops
      <emphasis>do</emphasis> change the level, each loop construct
      simply ignores whatever label is above it and passes its own exit
      label along.
    </para>
    <para>
      All this is easier to show you than it is to describe. I'll
      demonstrate with the easiest loop, which is
      <literal>LOOP</literal>:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Parse and Translate a LOOP Statement }

procedure DoLoop;
var L1, L2: string;
begin
   Match('p');
   L1 := NewLabel;
   L2 := NewLabel;
   PostLabel(L1);
   Block(L2);
   Match('e');
   EmitLn('BRA ' + L1);
   PostLabel(L2);
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      Notice that DoLoop now has TWO labels, not just one. The second is
      to give the <literal>BREAK</literal> instruction a target to jump
      to. If there is no <literal>BREAK</literal> within the loop, we've
      wasted a label and cluttered up things a bit, but there's no harm
      done.
    </para>
    <para>
      Note also that <literal>Block</literal> now has a parameter, which
      for loops will always be the exit address. The new version of
      <literal>Block</literal> is:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Recognize and Translate a Statement Block }

procedure Block(L: string);
begin
   while not(Look in ['e', 'l', 'u']) do begin
      case Look of
       'i': DoIf(L);
       'w': DoWhile;
       'p': DoLoop;
       'r': DoRepeat;
       'f': DoFor;
       'd': DoDo;
       'b': DoBreak(L);
       else Other;
      end;
   end;
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      Again, notice that all <literal>Block</literal> does with the
      label is to pass it into <literal>DoIf</literal> and
      <literal>DoBreak</literal>. The loop constructs don't need it,
      because they are going to pass their own label anyway.
    </para>
    <para>
      The new version of <literal>DoIf</literal> is:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Recognize and Translate an IF Construct }

procedure Block(L: string); Forward;


procedure DoIf(L: string);
var L1, L2: string;
begin
   Match('i');
   Condition;
   L1 := NewLabel;
   L2 := L1;
   EmitLn('BEQ ' + L1);
   Block(L);
   if Look = 'l' then begin
      Match('l');
      L2 := NewLabel;
      EmitLn('BRA ' + L2);
      PostLabel(L1);
      Block(L);
   end;
   Match('e');
   PostLabel(L2);
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      Here, the only thing that changes is the addition of the parameter
      to procedure <literal>Block</literal>. An <literal>IF</literal>
      statement doesn't change the loop nesting level, so
      <literal>DoIf</literal> just passes the label along. No matter how
      many levels of <literal>IF</literal> nesting we have, the same
      label will be used.
    </para>
    <para>
      Now, remember that <literal>DoProgram</literal> also calls
      <literal>Block</literal>, so it now needs to pass it a label. An
      attempt to exit the outermost block is an error, so
      <literal>DoProgram</literal> passes a null label which is caught
      by <literal>DoBreak</literal>:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Recognize and Translate a BREAK }

procedure DoBreak(L: string);
begin
   Match('b');
   if L &lt;&gt; '' then
      EmitLn('BRA ' + L)
   else Abort('No loop to break from');
end;


{--------------------------------------------------------------}

{ Parse and Translate a Program }

procedure DoProgram;
begin
   Block('');
   if Look &lt;&gt; 'e' then Expected('End');
   EmitLn('END')
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      That <emphasis>almost</emphasis> takes care of everything. Give it
      a try, see if you can <quote>break</quote> it &lt;pun&gt;. Careful, though.
      By this time we've used so many letters, it's hard to think of
      characters that aren't now representing reserved words. Remember:
      before you try the program, you're going to have to edit every
      occurence of <literal>Block</literal> in the other loop constructs
      to include the new parameter. Do it just like I did for
      <literal>LOOP</literal>.
    </para>
    <para>
      I said <emphasis>almost</emphasis> above. There is one slight
      problem: if you take a hard look at the code generated for
      <literal>DO</literal>, you'll see that if you break out of this
      loop, the value of the loop counter is still left on the stack.
      We're going to have to fix that! A shameâ€¦ that was one of our
      smaller routines, but it can't be helped. Here's a version that
      doesn't have the problem:
    </para>
    <programlisting>
{--------------------------------------------------------------}
{ Parse and Translate a DO Statement }

procedure Dodo;
var L1, L2: string;
begin
   Match('d');
   L1 := NewLabel;
   L2 := NewLabel;
   Expression;
   EmitLn('SUBQ #1,D0');
   PostLabel(L1);
   EmitLn('MOVE D0,-(SP)');
   Block(L2);
   EmitLn('MOVE (SP)+,D0');
   EmitLn('DBRA D0,' + L1);
   EmitLn('SUBQ #2,SP');
   PostLabel(L2);
   EmitLn('ADDQ #2,SP');
end;
{--------------------------------------------------------------}
</programlisting>
    <para>
      The two extra instructions, the <literal>SUBQ</literal> and
      <literal>ADDQ</literal>, take care of leaving the stack in the
      right shape.
    </para>
  </sect1>
  <sect1 xml:id="conclusion">
    <title>Conclusion</title>
    <para>
      At this point we have created a number of control constructsâ€¦ a
      richer set, really, than that provided by almost any other
      programming language. And, except for the <literal>FOR</literal>
      loop, it was pretty easy to do. Even that one was tricky only
      because it's tricky in assembler language.
    </para>
    <para>
      I'll conclude this session here. To wrap the thing up with a red
      ribbon, we really should have a go at having real keywords instead
      of these mickey-mouse single-character things. You've already seen
      that the extension to multi-character words is not difficult, but
      in this case it will make a big difference in the appearance of
      our input code. I'll save that little bit for the next
      installment. In that installment we'll also address Boolean
      expressions, so we can get rid of the dummy version of Condition
      that we've used here. See you then.
    </para>
    <para>
      For reference purposes, here is the completed parser for this
      session:
    </para>
    <programlisting>
{--------------------------------------------------------------}
program Branch;

{--------------------------------------------------------------}
{ Constant Declarations }

const TAB = ^I;
      CR  = ^M;


{--------------------------------------------------------------}
{ Variable Declarations }

var Look  : char;              { Lookahead Character }
    Lcount: integer;           { Label Counter }


{--------------------------------------------------------------}
{ Read New Character From Input Stream }

procedure GetChar;
begin
   Read(Look);
end;


{--------------------------------------------------------------}
{ Report an Error }

procedure Error(s: string);
begin
   WriteLn;
   WriteLn(^G, 'Error: ', s, '.');
end;


{--------------------------------------------------------------}
{ Report Error and Halt }

procedure Abort(s: string);
begin
   Error(s);
   Halt;
end;


{--------------------------------------------------------------}
{ Report What Was Expected }

procedure Expected(s: string);
begin
   Abort(s + ' Expected');
end;

{--------------------------------------------------------------}
{ Match a Specific Input Character }

procedure Match(x: char);
begin
   if Look = x then GetChar
   else Expected('''' + x + '''');
end;


{--------------------------------------------------------------}
{ Recognize an Alpha Character }

function IsAlpha(c: char): boolean;
begin
   IsAlpha := UpCase(c) in ['A'..'Z'];
end;


{--------------------------------------------------------------}
{ Recognize a Decimal Digit }

function IsDigit(c: char): boolean;
begin
   IsDigit := c in ['0'..'9'];
end;
                             

{--------------------------------------------------------------}
{ Recognize an Addop }

function IsAddop(c: char): boolean;
begin
   IsAddop := c in ['+', '-'];
end;


{--------------------------------------------------------------}
{ Recognize White Space }

function IsWhite(c: char): boolean;
begin
   IsWhite := c in [' ', TAB];
end;


{--------------------------------------------------------------}
{ Skip Over Leading White Space }

procedure SkipWhite;
begin
   while IsWhite(Look) do
      GetChar;
end;


{--------------------------------------------------------------}
{ Get an Identifier }

function GetName: char;
begin
   if not IsAlpha(Look) then Expected('Name');
   GetName := UpCase(Look);
   GetChar;
end;




{--------------------------------------------------------------}
{ Get a Number }

function GetNum: char;
begin
   if not IsDigit(Look) then Expected('Integer');
   GetNum := Look;
   GetChar;
end;


{--------------------------------------------------------------}
{ Generate a Unique Label }

function NewLabel: string;
var S: string;
begin
   Str(LCount, S);
   NewLabel := 'L' + S;
   Inc(LCount);
end;


{--------------------------------------------------------------}
{ Post a Label To Output }

procedure PostLabel(L: string);
begin
   WriteLn(L, ':');
end;


{--------------------------------------------------------------}
{ Output a String with Tab }

procedure Emit(s: string);
begin
   Write(TAB, s);
end;


{--------------------------------------------------------------}

{ Output a String with Tab and CRLF }

procedure EmitLn(s: string);
begin
   Emit(s);
   WriteLn;
end;


{--------------------------------------------------------------}
{ Parse and Translate a Boolean Condition }

procedure Condition;
begin
   EmitLn('&lt;condition&gt;');
end;

                             


{--------------------------------------------------------------}
{ Parse and Translate a Math Expression }

procedure Expression;
begin
   EmitLn('&lt;expr&gt;');
end;


{--------------------------------------------------------------}
{ Recognize and Translate an IF Construct }

procedure Block(L: string); Forward;


procedure DoIf(L: string);
var L1, L2: string;
begin
   Match('i');
   Condition;
   L1 := NewLabel;
   L2 := L1;
   EmitLn('BEQ ' + L1);
   Block(L);
   if Look = 'l' then begin
      Match('l');
      L2 := NewLabel;
      EmitLn('BRA ' + L2);
      PostLabel(L1);
      Block(L);
   end;
   Match('e');
   PostLabel(L2);
end;


{--------------------------------------------------------------}
{ Parse and Translate a WHILE Statement }

procedure DoWhile;
var L1, L2: string;
begin
   Match('w');
   L1 := NewLabel;
   L2 := NewLabel;
   PostLabel(L1);
   Condition;
   EmitLn('BEQ ' + L2);
   Block(L2);
   Match('e');
   EmitLn('BRA ' + L1);
   PostLabel(L2);
end;
                             

{--------------------------------------------------------------}
{ Parse and Translate a LOOP Statement }

procedure DoLoop;
var L1, L2: string;
begin
   Match('p');
   L1 := NewLabel;
   L2 := NewLabel;
   PostLabel(L1);
   Block(L2);
   Match('e');
   EmitLn('BRA ' + L1);
   PostLabel(L2);
end;


{--------------------------------------------------------------}
{ Parse and Translate a REPEAT Statement }

procedure DoRepeat;
var L1, L2: string;
begin
   Match('r');
   L1 := NewLabel;
   L2 := NewLabel;
   PostLabel(L1);
   Block(L2);
   Match('u');
   Condition;
   EmitLn('BEQ ' + L1);
   PostLabel(L2);
end;


{--------------------------------------------------------------}
{ Parse and Translate a FOR Statement }

procedure DoFor;
var L1, L2: string;
    Name: char;
begin
   Match('f');
   L1 := NewLabel;
   L2 := NewLabel;
   Name := GetName;
   Match('=');
   Expression;
   EmitLn('SUBQ #1,D0');
   EmitLn('LEA ' + Name + '(PC),A0');
   EmitLn('MOVE D0,(A0)');
   Expression;
   EmitLn('MOVE D0,-(SP)');
   PostLabel(L1);
   EmitLn('LEA ' + Name + '(PC),A0');
   EmitLn('MOVE (A0),D0');
   EmitLn('ADDQ #1,D0');
   EmitLn('MOVE D0,(A0)');
   EmitLn('CMP (SP),D0');
   EmitLn('BGT ' + L2);
   Block(L2);
   Match('e');
   EmitLn('BRA ' + L1);
   PostLabel(L2);
   EmitLn('ADDQ #2,SP');
end;




{--------------------------------------------------------------}
{ Parse and Translate a DO Statement }

procedure Dodo;
var L1, L2: string;
begin
   Match('d');
   L1 := NewLabel;
   L2 := NewLabel;
   Expression;
   EmitLn('SUBQ #1,D0');
   PostLabel(L1);
   EmitLn('MOVE D0,-(SP)');
   Block(L2);
   EmitLn('MOVE (SP)+,D0');
   EmitLn('DBRA D0,' + L1);
   EmitLn('SUBQ #2,SP');
   PostLabel(L2);
   EmitLn('ADDQ #2,SP');
end;


{--------------------------------------------------------------}
{ Recognize and Translate a BREAK }

procedure DoBreak(L: string);
begin
   Match('b');
   EmitLn('BRA ' + L);
end;


{--------------------------------------------------------------}
{ Recognize and Translate an <quote>Other</quote> }

procedure Other;
begin
   EmitLn(GetName);
end;


{--------------------------------------------------------------}
{ Recognize and Translate a Statement Block }

procedure Block(L: string);
begin
   while not(Look in ['e', 'l', 'u']) do begin
      case Look of
       'i': DoIf(L);
       'w': DoWhile;
       'p': DoLoop;
       'r': DoRepeat;
       'f': DoFor;
       'd': DoDo;
       'b': DoBreak(L);
       else Other;
      end;
   end;
end;




{--------------------------------------------------------------}

{ Parse and Translate a Program }

procedure DoProgram;
begin
   Block('');
   if Look &lt;&gt; 'e' then Expected('End');
   EmitLn('END')
end;


{--------------------------------------------------------------}

{ Initialize }

procedure Init;
begin
   LCount := 0;
   GetChar;
end;


{--------------------------------------------------------------}
{ Main Program }

begin
   Init;
   DoProgram;
end.
{--------------------------------------------------------------}
</programlisting>
</sect1>
</chapter>

